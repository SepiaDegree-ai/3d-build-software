"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatSerializedViewerState = exports.isSerializedViewerState = exports.SERIALIZED_VIEWER_STATE_VERSION = void 0;
const _lodash_1 = require("#lodash");
const index_js_1 = require("../errors/index.js");
var MeasurementType;
(function (MeasurementType) {
    MeasurementType[MeasurementType["PERPENDICULAR"] = 0] = "PERPENDICULAR";
    MeasurementType[MeasurementType["POINTTOPOINT"] = 1] = "POINTTOPOINT";
})(MeasurementType || (MeasurementType = {}));
/**
 * v1 -> v1.1
 * - ui.filters.propertyFilter.isApplied field added
 * - ui.spotlightUserId swapped for spotlightUserSessionId
 * v1.1 -> v1.2
 * - ui.diff added
 */
exports.SERIALIZED_VIEWER_STATE_VERSION = 1.2;
/**
 * Note: This only does superficial validation. To really ensure that all of the keys are there, even if prefilled with default values, make sure you invoke
 * formatSerializedViewerState() on the state afterwards
 */
const isSerializedViewerState = (val) => {
    if (!val)
        return false;
    const keys = [
        'projectId',
        'sessionId',
        'resources',
        'ui',
        'viewer'
    ];
    if (!(0, _lodash_1.isObjectLike)(val))
        return false;
    const valKeys = Object.keys(val);
    if ((0, _lodash_1.intersection)(valKeys, keys).length !== keys.length)
        return false;
    return true;
};
exports.isSerializedViewerState = isSerializedViewerState;
const initializeMissingData = (state) => {
    const throwInvalidError = (missingPath) => {
        throw new index_js_1.UnformattableSerializedViewerStateError('Required data missing from SerializedViewerState: ' + missingPath);
    };
    const defaultMeasurementOptions = {
        visible: false,
        type: MeasurementType.POINTTOPOINT,
        vertexSnap: false,
        units: 'm',
        precision: 2
    };
    const measurementOptions = {
        ...defaultMeasurementOptions,
        ...state.ui?.measurement?.options
    };
    return {
        projectId: state.projectId || throwInvalidError('projectId'),
        sessionId: state.sessionId || `nullSessionId-${Math.random() * 1000}`,
        viewer: {
            ...(state.viewer || {}),
            metadata: {
                ...(state.viewer?.metadata || {}),
                filteringState: state.viewer?.metadata?.filteringState || null
            }
        },
        resources: {
            ...(state.resources || {}),
            request: {
                ...(state.resources?.request || {}),
                resourceIdString: state.resources?.request?.resourceIdString ||
                    throwInvalidError('resources.request.resourceIdString'),
                threadFilters: {
                    ...(state.resources?.request?.threadFilters || {}),
                    includeArchived: state.resources?.request?.threadFilters?.includeArchived || false,
                    loadedVersionsOnly: state.resources?.request?.threadFilters?.loadedVersionsOnly || false
                }
            }
        },
        ui: {
            ...(state.ui || {}),
            threads: {
                ...(state.ui?.threads || {}),
                openThread: {
                    ...(state.ui?.threads?.openThread || {}),
                    threadId: state.ui?.threads?.openThread?.threadId || null,
                    isTyping: state.ui?.threads?.openThread?.isTyping || false,
                    newThreadEditor: state.ui?.threads?.openThread?.newThreadEditor || false
                }
            },
            diff: {
                ...(state.ui?.diff || {}),
                command: state.ui?.diff?.command || null,
                time: state.ui?.diff?.time || 0.5,
                mode: state.ui?.diff?.mode || 1
            },
            spotlightUserSessionId: state.ui?.spotlightUserSessionId || null,
            filters: {
                ...(state.ui?.filters || {}),
                isolatedObjectIds: state.ui?.filters?.isolatedObjectIds || [],
                hiddenObjectIds: state.ui?.filters?.hiddenObjectIds || [],
                selectedObjectIds: state.ui?.filters?.selectedObjectIds || [],
                propertyFilter: {
                    ...(state.ui?.filters?.propertyFilter || {}),
                    key: state.ui?.filters?.propertyFilter?.key || null,
                    isApplied: state.ui?.filters?.propertyFilter?.isApplied || false
                }
            },
            camera: {
                ...(state.ui?.camera || {}),
                position: state.ui?.camera?.position || throwInvalidError('ui.camera.position'),
                target: state.ui?.camera?.target || throwInvalidError('ui.camera.target'),
                isOrthoProjection: state.ui?.camera?.isOrthoProjection || false,
                zoom: state.ui?.camera?.zoom || 1
            },
            viewMode: state.ui?.viewMode || 0,
            sectionBox: state.ui?.sectionBox?.min?.length && state.ui?.sectionBox.max?.length
                ? {
                    min: state.ui.sectionBox.min,
                    max: state.ui.sectionBox.max
                }
                : null,
            lightConfig: {
                ...(state.ui?.lightConfig || {}),
                intensity: state.ui?.lightConfig?.intensity,
                indirectLightIntensity: state.ui?.lightConfig?.indirectLightIntensity,
                elevation: state.ui?.lightConfig?.elevation,
                azimuth: state.ui?.lightConfig?.azimuth
            },
            explodeFactor: state.ui?.explodeFactor || 0,
            selection: state.ui?.selection || null,
            measurement: {
                enabled: state.ui?.measurement?.enabled ?? false,
                options: measurementOptions
            }
        }
    };
};
/**
 * Formats SerializedViewerState by bringing it up to date with the structure of the latest version
 * and ensuring missing keys are initialized with default values
 */
const formatSerializedViewerState = (state) => {
    const finalState = initializeMissingData(state);
    return finalState;
};
exports.formatSerializedViewerState = formatSerializedViewerState;
//# sourceMappingURL=state.js.map