"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.canQueryProjectPolicyFactory = void 0;
const workspaceRole_js_1 = require("../checks/workspaceRole.js");
const authResult_js_1 = require("../domain/authResult.js");
const projects_js_1 = require("../checks/projects.js");
const serverRole_js_1 = require("../checks/serverRole.js");
const workspaceSso_js_1 = require("../checks/workspaceSso.js");
const constants_js_1 = require("../../core/constants.js");
const authErrors_js_1 = require("../domain/authErrors.js");
const canQueryProjectPolicyFactory = (loaders) => async ({ userId, projectId }) => {
    const { FF_ADMIN_OVERRIDE_ENABLED, FF_WORKSPACES_MODULE_ENABLED } = loaders.getEnv();
    const project = await loaders.getProject({ projectId });
    // hiding the project not found, to stop id brute force lookups
    if (!project)
        return (0, authResult_js_1.unauthorized)(authErrors_js_1.ProjectNotFoundError);
    // All users may read public projects
    const isPublicResult = await (0, projects_js_1.requireExactProjectVisibilityFactory)({ loaders })({
        projectId,
        projectVisibility: 'public'
    });
    if (isPublicResult) {
        return (0, authResult_js_1.authorized)();
    }
    // All users may read link-shareable projects
    const isLinkShareableResult = await (0, projects_js_1.requireExactProjectVisibilityFactory)({
        loaders
    })({
        projectId,
        projectVisibility: 'linkShareable'
    });
    if (isLinkShareableResult) {
        return (0, authResult_js_1.authorized)();
    }
    // From this point on, you cannot pass as an unknown user
    if (!userId) {
        return (0, authResult_js_1.unauthorized)(authErrors_js_1.ProjectNoAccessError);
    }
    // When G O D M O D E is enabled
    if (FF_ADMIN_OVERRIDE_ENABLED) {
        // Server admins may read all project data
        const isServerAdminResult = await (0, serverRole_js_1.requireExactServerRole)({ loaders })({
            userId,
            role: constants_js_1.Roles.Server.Admin
        });
        if (isServerAdminResult) {
            return (0, authResult_js_1.authorized)();
        }
    }
    const { workspaceId } = project;
    // When a project belongs to a workspace
    if (FF_WORKSPACES_MODULE_ENABLED && !!workspaceId) {
        // User must have a workspace role to read project data
        const hasWorkspaceRoleResult = await (0, workspaceRole_js_1.requireAnyWorkspaceRole)({ loaders })({
            userId,
            workspaceId
        });
        if (!hasWorkspaceRoleResult) {
            // Should we hide the fact, the project is in a workspace?
            return (0, authResult_js_1.unauthorized)(authErrors_js_1.WorkspaceNoAccessError);
        }
        const hasMinimumMemberRole = await (0, workspaceRole_js_1.requireMinimumWorkspaceRole)({
            loaders
        })({
            userId,
            workspaceId,
            role: 'workspace:member'
        });
        if (hasMinimumMemberRole) {
            const workspaceSsoProvider = await loaders.getWorkspaceSsoProvider({
                workspaceId
            });
            if (!!workspaceSsoProvider) {
                // Member and admin user must have a valid SSO session to read project data
                const hasValidSsoSessionResult = await (0, workspaceSso_js_1.requireValidWorkspaceSsoSession)({
                    loaders
                })({
                    userId,
                    workspaceId
                });
                if (!hasValidSsoSessionResult) {
                    return (0, authResult_js_1.unauthorized)(authErrors_js_1.WorkspaceSsoSessionInvalidError);
                }
            }
            // Workspace members get to go through without an explicit project role
            return (0, authResult_js_1.authorized)();
        }
        else {
            // just fall through to the generic project role check for workspace:guest-s
        }
    }
    // User must have at least stream reviewer role to read project data
    const hasMinimumProjectRoleResult = await (0, projects_js_1.requireMinimumProjectRoleFactory)({
        loaders
    })({
        userId,
        projectId,
        role: 'stream:reviewer'
    });
    if (hasMinimumProjectRoleResult) {
        return (0, authResult_js_1.authorized)();
    }
    return (0, authResult_js_1.unauthorized)(authErrors_js_1.ProjectNoAccessError);
};
exports.canQueryProjectPolicyFactory = canQueryProjectPolicyFactory;
//# sourceMappingURL=canQueryProject.js.map