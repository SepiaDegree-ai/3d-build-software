import { AuthResult } from '../domain/authResult.js';
import { AuthCheckContextLoaders } from '../domain/loaders.js';
import { ProjectContext, UserContext } from '../domain/policies.js';
import { ProjectNoAccessError, ProjectNotFoundError, WorkspaceNoAccessError, WorkspaceSsoSessionInvalidError } from '../domain/authErrors.js';
export declare const canQueryProjectPolicyFactory: (loaders: Pick<AuthCheckContextLoaders, "getEnv" | "getProject" | "getProjectRole" | "getServerRole" | "getWorkspaceRole" | "getWorkspaceSsoProvider" | "getWorkspaceSsoSession">) => ({ userId, projectId }: UserContext & ProjectContext) => Promise<AuthResult<typeof ProjectNotFoundError | typeof ProjectNoAccessError | typeof WorkspaceNoAccessError | typeof WorkspaceSsoSessionInvalidError>>;
//# sourceMappingURL=canQueryProject.d.ts.map